using System;
using System.Web;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;


public partial class Modules_Account_Statement_account_statement : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        G.L();
    }
    public void GetHtmlContent()
    {
      
        string completeHtml = HtmlContent.Value;
        completeHtml = completeHtml.Replace("Back", "");
        completeHtml = completeHtml.Replace("C:\\", "");
        // completeHtml.Replace("<asp:Button ID='Genrate' class='btn btn-success pull-right' runat='server\" Text=\"Click to Generate\"OnClick=\"Genrate_Click\" OnClientClick=\"GetHtml();\" />", "");
        //completeHtml.Replace("<button class='btn btn-success'>Back</button>", "");
        // completeHtml = completeHtml.Replace(" class=\"col-lg-4 invoice-logo\"", "class='col-lg-4' style='height: 70% !important;width: auto !important;max-width: 100%;'");
        // completeHtml = completeHtml.Replace("table_invoice", "style='font-size: 12px; color: #2e2e2e; border: 1px solid #dddddd; padding: 0 5px;'");
        //completeHtml = completeHtml.Replace("class=\"col-lg-8 invoice-header-info\"", " class='col-lg-8' style=' padding: 10px;    font-size: 8px;    min-height: 120px;'");

        //Response.Write(completeHtml);

        StringReader sr = new StringReader(completeHtml);
        
        Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 10f);

        pdfDoc.HtmlStyleClass = "../../assets/css/master_style.css";
        
        HTMLWorker htmlparser = new HTMLWorker(pdfDoc);
        PdfWriter.GetInstance(pdfDoc, new FileStream(HttpContext.Current.Server.MapPath("..\\Customer\\AccountStatements\\" + FileNameField.Value.ToString() + ".pdf"), FileMode.Create, System.IO.FileAccess.Write));



        using (MemoryStream memoryStream = new MemoryStream())
        {

            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, memoryStream);
            pdfDoc.Open();

            htmlparser.Parse(sr);
            pdfDoc.Close();

            byte[] bytes = memoryStream.ToArray();
            memoryStream.Close();

            // Clears all content output from the buffer stream         

            HttpContext.Current.Response.Clear();
            // Gets or sets the HTTP MIME type of the output stream.
            HttpContext.Current.Response.ContentType = "application/pdf";
            // Adds an HTTP header to the output stream
            HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment; filename=" + FileNameField.Value + ".pdf");

            //Gets or sets a value indicating whether to buffer output and send it after
            // the complete response is finished processing.
            HttpContext.Current.Response.Buffer = true;
            // Sets the Cache-Control header to one of the values of System.Web.HttpCacheability.

            HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache);
            // Writes a string of binary characters to the HTTP output stream. it write the generated bytes .

            HttpContext.Current.Response.BinaryWrite(bytes);
            // Sends all currently buffered output to the client, stops execution of the
            // page, and raises the System.Web.HttpApplication.EndRequest event.

            HttpContext.Current.Response.End();
            // Closes the socket connection to a client. it is a necessary step as you must close the response after doing work.its best approach.
            HttpContext.Current.Response.Close();
        }

       // return "";

    }
    protected void Button2_Click(object sender, EventArgs e)
    {
        GetHtmlContent();
    }
    
}